<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
// Generated from <#= Host.TemplateFile #>
// on <#= DateTime.Now.ToString() #>
using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Omise.Models {
<#
var path = Host.TemplateFile.Replace("Models.tt", "Models.txt");
var modelMap = new Dictionary<string, string>();
using (var fileStream = new FileStream(path, FileMode.Open))
using (var reader = new StreamReader(fileStream)) {
    string lastModel = null;

    string line;
    while ((line = reader.ReadLine()) != null) {
        var columns = line.Trim().Split(new char[] {' '});

        if (!line.StartsWith(" ")) {
            var modelName = columns[0];
            var modelAlias = modelName.ToLower();
            if (columns.Length > 1) {
                modelAlias = columns[1];
            }

            modelMap[modelAlias] = modelName;
            if (lastModel != null && lastModel != modelName) {
    #>    }

<#          }
    #>    public partial class <#= columns[0] #> : ModelBase {
<#
            lastModel = modelName;

        } else {
            var fieldName = columns[0];
            var fieldType = columns[1];
            var fieldJsonName = fieldName.ToLower();
            if (columns.Length > 2) {
                fieldJsonName = columns[2];
            }
#>        [JsonProperty("<#= fieldJsonName #>")] public <#= fieldType #> <#= fieldName #> { get; set; }
<#      }
    }
}
#>
    }

    public static partial class ModelTypes {
        static readonly IDictionary<string, Type> lookup = new Dictionary<string, Type>
        {
<#      foreach (var pair in modelMap) {
#>            { "<#= pair.Key #>", typeof(<#= pair.Value #>) },
<#      } #>
            { "model_base", typeof(ModelBase) }
        };

        static readonly IDictionary<Type, string> reverseLookup = new Dictionary<Type, string>
        {
<#      foreach (var pair in modelMap) {
#>            { typeof(<#= pair.Value #>), "<#= pair.Key #>" },
<#      } #>
            { typeof(ModelBase), "model_base" }
        };
    }
}