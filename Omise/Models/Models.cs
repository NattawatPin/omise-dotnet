// <auto-generated />
// Generated from /Users/chakrit/Documents/omise/omise-dotnet/Omise/Models/Models.tt
// on 12/9/2015 4:25:21 PM
using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Omise.Models {
    public partial class Account : ModelBase {
        [JsonProperty("email")]
        public string Email { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Account)obj;

            return base.Equals(obj) &&
                this.Email == another.Email &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Email.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Balance : ModelBase {
        [JsonProperty("available")]
        public long Available { get; set; }
        [JsonProperty("total")]
        public long Total { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Balance)obj;

            return base.Equals(obj) &&
                this.Available == another.Available &&
                this.Total == another.Total &&
                this.Currency == another.Currency &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Available.GetHashCode();
                hash = hash*23 + Total.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();

                return hash;
            }
        }
    }

    public partial class BankAccount : ModelBase {
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("number")]
        public string Number { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (BankAccount)obj;

            return base.Equals(obj) &&
                this.Brand == another.Brand &&
                this.Number == another.Number &&
                this.LastDigits == another.LastDigits &&
                this.Name == another.Name &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Brand.GetHashCode();
                hash = hash*23 + Number.GetHashCode();
                hash = hash*23 + LastDigits.GetHashCode();
                hash = hash*23 + Name.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Card : ModelBase {
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("bank")]
        public string Bank { get; set; }
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }
        [JsonProperty("financing")]
        public string Financing { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("expiration_month")]
        public int ExpirationMonth { get; set; }
        [JsonProperty("expiration_year")]
        public int ExpirationYear { get; set; }
        [JsonProperty("fingerprint")]
        public string Fingerprint { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("security_code_check")]
        public bool SecurityCodeCheck { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Card)obj;

            return base.Equals(obj) &&
                this.Country == another.Country &&
                this.City == another.City &&
                this.Bank == another.Bank &&
                this.PostalCode == another.PostalCode &&
                this.Financing == another.Financing &&
                this.LastDigits == another.LastDigits &&
                this.Brand == another.Brand &&
                this.ExpirationMonth == another.ExpirationMonth &&
                this.ExpirationYear == another.ExpirationYear &&
                this.Fingerprint == another.Fingerprint &&
                this.Name == another.Name &&
                this.SecurityCodeCheck == another.SecurityCodeCheck &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Country.GetHashCode();
                hash = hash*23 + City.GetHashCode();
                hash = hash*23 + Bank.GetHashCode();
                hash = hash*23 + PostalCode.GetHashCode();
                hash = hash*23 + Financing.GetHashCode();
                hash = hash*23 + LastDigits.GetHashCode();
                hash = hash*23 + Brand.GetHashCode();
                hash = hash*23 + ExpirationMonth.GetHashCode();
                hash = hash*23 + ExpirationYear.GetHashCode();
                hash = hash*23 + Fingerprint.GetHashCode();
                hash = hash*23 + Name.GetHashCode();
                hash = hash*23 + SecurityCodeCheck.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Charge : ModelBase {
        [JsonProperty("status")]
        public ChargeStatus Status { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("capture")]
        public bool Capture { get; set; }
        [JsonProperty("captured")]
        public bool Captured { get; set; }
        [JsonProperty("authorized")]
        public bool Authorized { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }
        [JsonProperty("refunded")]
        public long Refunded { get; set; }
        [JsonProperty("refunds")]
        public ScopedList<Refund> Refunds { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("customer")]
        public string Customer { get; set; }
        [JsonProperty("ip")]
        public string IP { get; set; }
        [JsonProperty("dispute")]
        public Dispute Dispute { get; set; }
        [JsonProperty("return_uri")]
        public string ReturnURI { get; set; }
        [JsonProperty("authorize_uri")]
        public string AuthorizeURI { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Charge)obj;

            return base.Equals(obj) &&
                this.Status == another.Status &&
                this.Amount == another.Amount &&
                this.Currency == another.Currency &&
                this.Description == another.Description &&
                this.Capture == another.Capture &&
                this.Captured == another.Captured &&
                this.Authorized == another.Authorized &&
                this.Paid == another.Paid &&
                this.Transaction == another.Transaction &&
                this.Card == another.Card &&
                this.Refunded == another.Refunded &&
                this.Refunds == another.Refunds &&
                this.FailureCode == another.FailureCode &&
                this.FailureMessage == another.FailureMessage &&
                this.Customer == another.Customer &&
                this.IP == another.IP &&
                this.Dispute == another.Dispute &&
                this.ReturnURI == another.ReturnURI &&
                this.AuthorizeURI == another.AuthorizeURI &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Status.GetHashCode();
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Capture.GetHashCode();
                hash = hash*23 + Captured.GetHashCode();
                hash = hash*23 + Authorized.GetHashCode();
                hash = hash*23 + Paid.GetHashCode();
                hash = hash*23 + Transaction.GetHashCode();
                hash = hash*23 + Card.GetHashCode();
                hash = hash*23 + Refunded.GetHashCode();
                hash = hash*23 + Refunds.GetHashCode();
                hash = hash*23 + FailureCode.GetHashCode();
                hash = hash*23 + FailureMessage.GetHashCode();
                hash = hash*23 + Customer.GetHashCode();
                hash = hash*23 + IP.GetHashCode();
                hash = hash*23 + Dispute.GetHashCode();
                hash = hash*23 + ReturnURI.GetHashCode();
                hash = hash*23 + AuthorizeURI.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Customer : ModelBase {
        [JsonProperty("default_card")]
        public string DefaultCard { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("cards")]
        public ScopedList<Card> Cards { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Customer)obj;

            return base.Equals(obj) &&
                this.DefaultCard == another.DefaultCard &&
                this.Email == another.Email &&
                this.Description == another.Description &&
                this.Cards == another.Cards &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + DefaultCard.GetHashCode();
                hash = hash*23 + Email.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Cards.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Dispute : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("status")]
        public DisputeStatus Status { get; set; }
        [JsonProperty("message")]
        public string Message { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Dispute)obj;

            return base.Equals(obj) &&
                this.Amount == another.Amount &&
                this.Currency == another.Currency &&
                this.Status == another.Status &&
                this.Message == another.Message &&
                this.Charge == another.Charge &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Status.GetHashCode();
                hash = hash*23 + Message.GetHashCode();
                hash = hash*23 + Charge.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Recipient : ModelBase {
        [JsonProperty("verified")]
        public bool Verified { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("type")]
        public RecipientType Type { get; set; }
        [JsonProperty("taxid")]
        public string TaxID { get; set; }
        [JsonProperty("bankaccount")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Recipient)obj;

            return base.Equals(obj) &&
                this.Verified == another.Verified &&
                this.Active == another.Active &&
                this.Name == another.Name &&
                this.Email == another.Email &&
                this.Description == another.Description &&
                this.Type == another.Type &&
                this.TaxID == another.TaxID &&
                this.BankAccount == another.BankAccount &&
                this.FailureCode == another.FailureCode &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Verified.GetHashCode();
                hash = hash*23 + Active.GetHashCode();
                hash = hash*23 + Name.GetHashCode();
                hash = hash*23 + Email.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Type.GetHashCode();
                hash = hash*23 + TaxID.GetHashCode();
                hash = hash*23 + BankAccount.GetHashCode();
                hash = hash*23 + FailureCode.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Refund : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Refund)obj;

            return base.Equals(obj) &&
                this.Amount == another.Amount &&
                this.Currency == another.Currency &&
                this.Charge == another.Charge &&
                this.Transaction == another.Transaction &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Charge.GetHashCode();
                hash = hash*23 + Transaction.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Token : ModelBase {
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Token)obj;

            return base.Equals(obj) &&
                this.Used == another.Used &&
                this.Card == another.Card &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Used.GetHashCode();
                hash = hash*23 + Card.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Transaction : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("type")]
        public TransactionType Type { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Transaction)obj;

            return base.Equals(obj) &&
                this.Amount == another.Amount &&
                this.Currency == another.Currency &&
                this.Type == another.Type &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Type.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Transfer : ModelBase {
        [JsonProperty("recipient")]
        public string Recipient { get; set; }
        [JsonProperty("bankaccount")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("sent")]
        public bool Sent { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Transfer)obj;

            return base.Equals(obj) &&
                this.Recipient == another.Recipient &&
                this.BankAccount == another.BankAccount &&
                this.Sent == another.Sent &&
                this.Paid == another.Paid &&
                this.Amount == another.Amount &&
                this.Currency == another.Currency &&
                this.FailureCode == another.FailureCode &&
                this.FailureMessage == another.FailureMessage &&
                this.Transaction == another.Transaction &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Recipient.GetHashCode();
                hash = hash*23 + BankAccount.GetHashCode();
                hash = hash*23 + Sent.GetHashCode();
                hash = hash*23 + Paid.GetHashCode();
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + FailureCode.GetHashCode();
                hash = hash*23 + FailureMessage.GetHashCode();
                hash = hash*23 + Transaction.GetHashCode();

                return hash;
            }
        }
    }


    public partial class ModelTypes {
        static readonly IDictionary<string, Type> lookup = new Dictionary<string, Type>
        {
            { "account", typeof(Account) },
            { "balance", typeof(Balance) },
            { "bank_account", typeof(BankAccount) },
            { "card", typeof(Card) },
            { "charge", typeof(Charge) },
            { "customer", typeof(Customer) },
            { "dispute", typeof(Dispute) },
            { "recipient", typeof(Recipient) },
            { "refund", typeof(Refund) },
            { "token", typeof(Token) },
            { "transaction", typeof(Transaction) },
            { "transfer", typeof(Transfer) },
        };

        static readonly IDictionary<Type, string> reverseLookup = new Dictionary<Type, string>
        {
            { typeof(Account), "account" },
            { typeof(Balance), "balance" },
            { typeof(BankAccount), "bank_account" },
            { typeof(Card), "card" },
            { typeof(Charge), "charge" },
            { typeof(Customer), "customer" },
            { typeof(Dispute), "dispute" },
            { typeof(Recipient), "recipient" },
            { typeof(Refund), "refund" },
            { typeof(Token), "token" },
            { typeof(Transaction), "transaction" },
            { typeof(Transfer), "transfer" },
        };
    }
}
