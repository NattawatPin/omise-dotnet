// <auto-generated />
// Generated from Omise/Models/Models.tt
// on 5/17/2017 12:01:52 PM
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Omise.Models {
    public partial class Account : ModelBase {
        [JsonProperty("email")]
        public string Email { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Account)obj;

            return base.Equals(obj) &&
                object.Equals(this.Email, another.Email) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Email.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Balance : ModelBase {
        [JsonProperty("available")]
        public long Available { get; set; }
        [JsonProperty("total")]
        public long Total { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Balance)obj;

            return base.Equals(obj) &&
                object.Equals(this.Available, another.Available) &&
                object.Equals(this.Total, another.Total) &&
                object.Equals(this.Currency, another.Currency) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Available.GetHashCode();
                hash = hash*23 + Total.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();

                return hash;
            }
        }
    }

    public partial class BankAccount : ModelBase {
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("number")]
        public string Number { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (BankAccount)obj;

            return base.Equals(obj) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.Number, another.Number) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Name, another.Name) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Brand.GetHashCode();
                hash = hash*23 + Number.GetHashCode();
                hash = hash*23 + LastDigits.GetHashCode();
                hash = hash*23 + Name.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Card : ModelBase {
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("bank")]
        public string Bank { get; set; }
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }
        [JsonProperty("financing")]
        public string Financing { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("expiration_month")]
        public int ExpirationMonth { get; set; }
        [JsonProperty("expiration_year")]
        public int ExpirationYear { get; set; }
        [JsonProperty("fingerprint")]
        public string Fingerprint { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("security_code_check")]
        public bool SecurityCodeCheck { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Card)obj;

            return base.Equals(obj) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.City, another.City) &&
                object.Equals(this.Bank, another.Bank) &&
                object.Equals(this.PostalCode, another.PostalCode) &&
                object.Equals(this.Financing, another.Financing) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.ExpirationMonth, another.ExpirationMonth) &&
                object.Equals(this.ExpirationYear, another.ExpirationYear) &&
                object.Equals(this.Fingerprint, another.Fingerprint) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.SecurityCodeCheck, another.SecurityCodeCheck) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Country.GetHashCode();
                hash = hash*23 + City.GetHashCode();
                hash = hash*23 + Bank.GetHashCode();
                hash = hash*23 + PostalCode.GetHashCode();
                hash = hash*23 + Financing.GetHashCode();
                hash = hash*23 + LastDigits.GetHashCode();
                hash = hash*23 + Brand.GetHashCode();
                hash = hash*23 + ExpirationMonth.GetHashCode();
                hash = hash*23 + ExpirationYear.GetHashCode();
                hash = hash*23 + Fingerprint.GetHashCode();
                hash = hash*23 + Name.GetHashCode();
                hash = hash*23 + SecurityCodeCheck.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Charge : ModelBase {
        [JsonProperty("status")]
        public ChargeStatus Status { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("capture")]
        public bool Capture { get; set; }
        [JsonProperty("authorized")]
        public bool Authorized { get; set; }
        [JsonProperty("reversed")]
        public bool Reversed { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }
        [JsonProperty("source_of_fund")]
        public SourceOfFunds SourceOfFund { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }
        [JsonProperty("refunded")]
        public long Refunded { get; set; }
        [JsonProperty("refunds")]
        public ScopedList<Refund> Refunds { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("customer")]
        public string Customer { get; set; }
        [JsonProperty("ip")]
        public string IP { get; set; }
        [JsonProperty("dispute")]
        public Dispute Dispute { get; set; }
        [JsonProperty("return_uri")]
        public string ReturnURI { get; set; }
        [JsonProperty("authorize_uri")]
        public string AuthorizeURI { get; set; }
        [JsonProperty("offsite")]
        public OffsiteTypes Offsite { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Charge)obj;

            return base.Equals(obj) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Capture, another.Capture) &&
                object.Equals(this.Authorized, another.Authorized) &&
                object.Equals(this.Reversed, another.Reversed) &&
                object.Equals(this.Paid, another.Paid) &&
                object.Equals(this.Transaction, another.Transaction) &&
                object.Equals(this.SourceOfFund, another.SourceOfFund) &&
                object.Equals(this.Card, another.Card) &&
                object.Equals(this.Refunded, another.Refunded) &&
                object.Equals(this.Refunds, another.Refunds) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.Customer, another.Customer) &&
                object.Equals(this.IP, another.IP) &&
                object.Equals(this.Dispute, another.Dispute) &&
                object.Equals(this.ReturnURI, another.ReturnURI) &&
                object.Equals(this.AuthorizeURI, another.AuthorizeURI) &&
                object.Equals(this.Offsite, another.Offsite) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Status.GetHashCode();
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Capture.GetHashCode();
                hash = hash*23 + Authorized.GetHashCode();
                hash = hash*23 + Reversed.GetHashCode();
                hash = hash*23 + Paid.GetHashCode();
                hash = hash*23 + Transaction.GetHashCode();
                hash = hash*23 + SourceOfFund.GetHashCode();
                hash = hash*23 + Card.GetHashCode();
                hash = hash*23 + Refunded.GetHashCode();
                hash = hash*23 + Refunds.GetHashCode();
                hash = hash*23 + FailureCode.GetHashCode();
                hash = hash*23 + FailureMessage.GetHashCode();
                hash = hash*23 + Customer.GetHashCode();
                hash = hash*23 + IP.GetHashCode();
                hash = hash*23 + Dispute.GetHashCode();
                hash = hash*23 + ReturnURI.GetHashCode();
                hash = hash*23 + AuthorizeURI.GetHashCode();
                hash = hash*23 + Offsite.GetHashCode();

                return hash;
            }
        }
    }

    public partial class ChargeScheduleDetails : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("customer")]
        public string Customer { get; set; }
        [JsonProperty("card")]
        public string Card { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (ChargeScheduleDetails)obj;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Customer, another.Customer) &&
                object.Equals(this.Card, another.Card) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Customer.GetHashCode();
                hash = hash*23 + Card.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Customer : ModelBase {
        [JsonProperty("default_card")]
        public string DefaultCard { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("cards")]
        public ScopedList<Card> Cards { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Customer)obj;

            return base.Equals(obj) &&
                object.Equals(this.DefaultCard, another.DefaultCard) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Cards, another.Cards) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + DefaultCard.GetHashCode();
                hash = hash*23 + Email.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Cards.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Dispute : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("status")]
        public DisputeStatus Status { get; set; }
        [JsonProperty("message")]
        public string Message { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Dispute)obj;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Message, another.Message) &&
                object.Equals(this.Charge, another.Charge) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Status.GetHashCode();
                hash = hash*23 + Message.GetHashCode();
                hash = hash*23 + Charge.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Event : ModelBase {
        [JsonProperty("key")]
        public string Key { get; set; }
        [JsonProperty("data")]
        public JRaw RawDataJson { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Event)obj;

            return base.Equals(obj) &&
                object.Equals(this.Key, another.Key) &&
                object.Equals(this.RawDataJson, another.RawDataJson) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Key.GetHashCode();
                hash = hash*23 + RawDataJson.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Link : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("multiple")]
        public bool Multiple { get; set; }
        [JsonProperty("title")]
        public string Title { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("charges")]
        public ScopedList<Charge> Charges { get; set; }
        [JsonProperty("payment_uri")]
        public string PaymentURI { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Link)obj;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Used, another.Used) &&
                object.Equals(this.Multiple, another.Multiple) &&
                object.Equals(this.Title, another.Title) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Charges, another.Charges) &&
                object.Equals(this.PaymentURI, another.PaymentURI) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Used.GetHashCode();
                hash = hash*23 + Multiple.GetHashCode();
                hash = hash*23 + Title.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Charges.GetHashCode();
                hash = hash*23 + PaymentURI.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Occurrence : ModelBase {
        [JsonProperty("schedule")]
        public string Schedule { get; set; }
        [JsonProperty("schedule_date")]
        public DateTime ScheduleDate { get; set; }
        [JsonProperty("retry_date")]
        public DateTime RetryDate { get; set; }
        [JsonProperty("processed_at")]
        public DateTime ProcessedAt { get; set; }
        [JsonProperty("status")]
        public OccurrenceStatus Status { get; set; }
        [JsonProperty("message")]
        public String Message { get; set; }
        [JsonProperty("result")]
        public String Result { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Occurrence)obj;

            return base.Equals(obj) &&
                object.Equals(this.Schedule, another.Schedule) &&
                object.Equals(this.ScheduleDate, another.ScheduleDate) &&
                object.Equals(this.RetryDate, another.RetryDate) &&
                object.Equals(this.ProcessedAt, another.ProcessedAt) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Message, another.Message) &&
                object.Equals(this.Result, another.Result) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Schedule.GetHashCode();
                hash = hash*23 + ScheduleDate.GetHashCode();
                hash = hash*23 + RetryDate.GetHashCode();
                hash = hash*23 + ProcessedAt.GetHashCode();
                hash = hash*23 + Status.GetHashCode();
                hash = hash*23 + Message.GetHashCode();
                hash = hash*23 + Result.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Recipient : ModelBase {
        [JsonProperty("verified")]
        public bool Verified { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("type")]
        public RecipientType Type { get; set; }
        [JsonProperty("taxid")]
        public string TaxID { get; set; }
        [JsonProperty("bank_account")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Recipient)obj;

            return base.Equals(obj) &&
                object.Equals(this.Verified, another.Verified) &&
                object.Equals(this.Active, another.Active) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.TaxID, another.TaxID) &&
                object.Equals(this.BankAccount, another.BankAccount) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Verified.GetHashCode();
                hash = hash*23 + Active.GetHashCode();
                hash = hash*23 + Name.GetHashCode();
                hash = hash*23 + Email.GetHashCode();
                hash = hash*23 + Description.GetHashCode();
                hash = hash*23 + Type.GetHashCode();
                hash = hash*23 + TaxID.GetHashCode();
                hash = hash*23 + BankAccount.GetHashCode();
                hash = hash*23 + FailureCode.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Refund : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Refund)obj;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.Transaction, another.Transaction) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Charge.GetHashCode();
                hash = hash*23 + Transaction.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Schedule : ModelBase {
        [JsonProperty("status")]
        public ScheduleStatus Status { get; set; }
        [JsonProperty("every")]
        public int Every { get; set; }
        [JsonProperty("period")]
        public SchedulePeriod Period { get; set; }
        [JsonProperty("in_words")]
        public String InWords { get; set; }
        [JsonProperty("on")]
        public ScheduleOn On { get; set; }
        [JsonProperty("start_date")]
        public DateTime StartDate { get; set; }
        [JsonProperty("end_date")]
        public DateTime EndDate { get; set; }
        [JsonProperty("charge")]
        public ChargeScheduleDetails Charge { get; set; }
        [JsonProperty("transfer")]
        public TransferScheduleDetails Transfer { get; set; }
        [JsonProperty("occurrences")]
        public ScopedList<Occurrence> Occurrences { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Schedule)obj;

            return base.Equals(obj) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Every, another.Every) &&
                object.Equals(this.Period, another.Period) &&
                object.Equals(this.InWords, another.InWords) &&
                object.Equals(this.On, another.On) &&
                object.Equals(this.StartDate, another.StartDate) &&
                object.Equals(this.EndDate, another.EndDate) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.Transfer, another.Transfer) &&
                object.Equals(this.Occurrences, another.Occurrences) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Status.GetHashCode();
                hash = hash*23 + Every.GetHashCode();
                hash = hash*23 + Period.GetHashCode();
                hash = hash*23 + InWords.GetHashCode();
                hash = hash*23 + On.GetHashCode();
                hash = hash*23 + StartDate.GetHashCode();
                hash = hash*23 + EndDate.GetHashCode();
                hash = hash*23 + Charge.GetHashCode();
                hash = hash*23 + Transfer.GetHashCode();
                hash = hash*23 + Occurrences.GetHashCode();

                return hash;
            }
        }
    }

    public partial class ScheduleOn : ModelBase {
        [JsonProperty("weekdays")]
        public int[] Weekdays { get; set; }
        [JsonProperty("days_of_month")]
        public int[] DaysOfMonth { get; set; }
        [JsonProperty("weekday_of_month")]
        public String WeekdayOfMonth { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (ScheduleOn)obj;

            return base.Equals(obj) &&
                object.Equals(this.Weekdays, another.Weekdays) &&
                object.Equals(this.DaysOfMonth, another.DaysOfMonth) &&
                object.Equals(this.WeekdayOfMonth, another.WeekdayOfMonth) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Weekdays.GetHashCode();
                hash = hash*23 + DaysOfMonth.GetHashCode();
                hash = hash*23 + WeekdayOfMonth.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Token : ModelBase {
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Token)obj;

            return base.Equals(obj) &&
                object.Equals(this.Used, another.Used) &&
                object.Equals(this.Card, another.Card) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Used.GetHashCode();
                hash = hash*23 + Card.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Transaction : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("type")]
        public TransactionType Type { get; set; }
        [JsonProperty("source")]
        public string Source { get; set; }
        [JsonProperty("transferable")]
        public DateTime Transferable { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Transaction)obj;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Source, another.Source) &&
                object.Equals(this.Transferable, another.Transferable) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + Type.GetHashCode();
                hash = hash*23 + Source.GetHashCode();
                hash = hash*23 + Transferable.GetHashCode();

                return hash;
            }
        }
    }

    public partial class Transfer : ModelBase {
        [JsonProperty("recipient")]
        public string Recipient { get; set; }
        [JsonProperty("bankaccount")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("sent")]
        public bool Sent { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("fee")]
        public long Fee { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (Transfer)obj;

            return base.Equals(obj) &&
                object.Equals(this.Recipient, another.Recipient) &&
                object.Equals(this.BankAccount, another.BankAccount) &&
                object.Equals(this.Sent, another.Sent) &&
                object.Equals(this.Paid, another.Paid) &&
                object.Equals(this.Fee, another.Fee) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.Transaction, another.Transaction) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Recipient.GetHashCode();
                hash = hash*23 + BankAccount.GetHashCode();
                hash = hash*23 + Sent.GetHashCode();
                hash = hash*23 + Paid.GetHashCode();
                hash = hash*23 + Fee.GetHashCode();
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + FailureCode.GetHashCode();
                hash = hash*23 + FailureMessage.GetHashCode();
                hash = hash*23 + Transaction.GetHashCode();

                return hash;
            }
        }
    }

    public partial class TransferScheduleDetails : ModelBase {
        [JsonProperty("recipient")]
        public string Recipient { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("percentage_of_balance")]
        public float PercentageOfBalance { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = (TransferScheduleDetails)obj;

            return base.Equals(obj) &&
                object.Equals(this.Recipient, another.Recipient) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.PercentageOfBalance, another.PercentageOfBalance) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                hash = hash*23 + Recipient.GetHashCode();
                hash = hash*23 + Amount.GetHashCode();
                hash = hash*23 + Currency.GetHashCode();
                hash = hash*23 + PercentageOfBalance.GetHashCode();

                return hash;
            }
        }
    }


    public partial class ModelTypes {
        static readonly IDictionary<string, Type> lookup = new Dictionary<string, Type>
        {
            { "account", typeof(Account) },
            { "balance", typeof(Balance) },
            { "bank_account", typeof(BankAccount) },
            { "card", typeof(Card) },
            { "charge", typeof(Charge) },
            { "chargescheduledetails", typeof(ChargeScheduleDetails) },
            { "customer", typeof(Customer) },
            { "dispute", typeof(Dispute) },
            { "event", typeof(Event) },
            { "link", typeof(Link) },
            { "occurrence", typeof(Occurrence) },
            { "recipient", typeof(Recipient) },
            { "refund", typeof(Refund) },
            { "schedule", typeof(Schedule) },
            { "scheduleon", typeof(ScheduleOn) },
            { "token", typeof(Token) },
            { "transaction", typeof(Transaction) },
            { "transfer", typeof(Transfer) },
            { "transferscheduledetails", typeof(TransferScheduleDetails) },
        };

        static readonly IDictionary<Type, string> reverseLookup = new Dictionary<Type, string>
        {
            { typeof(Account), "account" },
            { typeof(Balance), "balance" },
            { typeof(BankAccount), "bank_account" },
            { typeof(Card), "card" },
            { typeof(Charge), "charge" },
            { typeof(ChargeScheduleDetails), "chargescheduledetails" },
            { typeof(Customer), "customer" },
            { typeof(Dispute), "dispute" },
            { typeof(Event), "event" },
            { typeof(Link), "link" },
            { typeof(Occurrence), "occurrence" },
            { typeof(Recipient), "recipient" },
            { typeof(Refund), "refund" },
            { typeof(Schedule), "schedule" },
            { typeof(ScheduleOn), "scheduleon" },
            { typeof(Token), "token" },
            { typeof(Transaction), "transaction" },
            { typeof(Transfer), "transfer" },
            { typeof(TransferScheduleDetails), "transferscheduledetails" },
        };
    }
}
